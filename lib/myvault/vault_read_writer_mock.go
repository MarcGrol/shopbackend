// Code generated by MockGen. DO NOT EDIT.
// Source: api.go
//
// Generated by this command:
//
//	mockgen -source=api.go -package myvault -destination vault_read_writer_mock.go VaultReadWriter
//

// Package myvault is a generated GoMock package.
package myvault

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockVaultReader is a mock of VaultReader interface.
type MockVaultReader[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockVaultReaderMockRecorder[T]
	isgomock struct{}
}

// MockVaultReaderMockRecorder is the mock recorder for MockVaultReader.
type MockVaultReaderMockRecorder[T any] struct {
	mock *MockVaultReader[T]
}

// NewMockVaultReader creates a new mock instance.
func NewMockVaultReader[T any](ctrl *gomock.Controller) *MockVaultReader[T] {
	mock := &MockVaultReader[T]{ctrl: ctrl}
	mock.recorder = &MockVaultReaderMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVaultReader[T]) EXPECT() *MockVaultReaderMockRecorder[T] {
	return m.recorder
}

// Get mocks base method.
func (m *MockVaultReader[T]) Get(c context.Context, uid string) (T, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", c, uid)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockVaultReaderMockRecorder[T]) Get(c, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVaultReader[T])(nil).Get), c, uid)
}

// MockVaultReadWriter is a mock of VaultReadWriter interface.
type MockVaultReadWriter[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockVaultReadWriterMockRecorder[T]
	isgomock struct{}
}

// MockVaultReadWriterMockRecorder is the mock recorder for MockVaultReadWriter.
type MockVaultReadWriterMockRecorder[T any] struct {
	mock *MockVaultReadWriter[T]
}

// NewMockVaultReadWriter creates a new mock instance.
func NewMockVaultReadWriter[T any](ctrl *gomock.Controller) *MockVaultReadWriter[T] {
	mock := &MockVaultReadWriter[T]{ctrl: ctrl}
	mock.recorder = &MockVaultReadWriterMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVaultReadWriter[T]) EXPECT() *MockVaultReadWriterMockRecorder[T] {
	return m.recorder
}

// Get mocks base method.
func (m *MockVaultReadWriter[T]) Get(c context.Context, uid string) (T, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", c, uid)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockVaultReadWriterMockRecorder[T]) Get(c, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVaultReadWriter[T])(nil).Get), c, uid)
}

// Put mocks base method.
func (m *MockVaultReadWriter[T]) Put(c context.Context, uid string, value T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", c, uid, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockVaultReadWriterMockRecorder[T]) Put(c, uid, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockVaultReadWriter[T])(nil).Put), c, uid, value)
}
