// Code generated by MockGen. DO NOT EDIT.
// Source: vault.go

// Package myvault is a generated GoMock package.
package myvault

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockVault is a mock of Vault interface.
type MockVault struct {
	ctrl     *gomock.Controller
	recorder *MockVaultMockRecorder
}

// MockVaultMockRecorder is the mock recorder for MockVault.
type MockVaultMockRecorder struct {
	mock *MockVault
}

// NewMockVault creates a new mock instance.
func NewMockVault(ctrl *gomock.Controller) *MockVault {
	mock := &MockVault{ctrl: ctrl}
	mock.recorder = &MockVaultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVault) EXPECT() *MockVaultMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockVault) Get(c context.Context, uid string) (Token, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", c, uid)
	ret0, _ := ret[0].(Token)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockVaultMockRecorder) Get(c, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVault)(nil).Get), c, uid)
}

// Put mocks base method.
func (m *MockVault) Put(c context.Context, uid string, value Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", c, uid, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockVaultMockRecorder) Put(c, uid, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockVault)(nil).Put), c, uid, value)
}
